i am creating a location based attendance app now. but i am having a hard time designing the database. Here is the detail of my app. There will be students and teachers. only students who have signed up for the class can submit their attendance, meaning they will need to log into the app first. How to differentiate students and teacher is that when they log in, they will need to choose who they are. Teachers can see all the classes that he created and create a new class. When he creates a new class, he will need to give a name of the class. Then, he will see the attendance list of the student who submitted thier attendance. He will have an option to create a code that has the id of the class and students will have to enter the code to submit their attendance. Students can see all the available classes and join any classes they want, but need to wait for the approval from the teacher. after joining the class, they can submit their attendance. when they submit their attendance, the code will need to calcuate their current location and if they are within 50 meter of the location that the code of the class created. One class will have multiple days of attendance. the teacher can select which day to see the record and the record will have student id, name, remove option, submission time. as of name, my database is non-relational document database. has "users" folder. the folder have the login user information: document ID, username, email and avatar. 

I want you to create an efficient non-relational database design for the requirement i provided. give me details design. 

{
To design an efficient **non-relational (document-based) database** for your location-based attendance app, we will organize the data into collections (folders) and documents while minimizing duplication and ensuring efficient querying. Below is a complete design tailored to your requirements.

---

## **Database Design**

### **1. `users` Collection**
This collection stores information about all users (students and teachers). Since students and teachers share some attributes, we can use a `role` field to differentiate them.

#### **Document Structure**
```json
{
  "_id": "<unique_user_id>",
  "username": "john_doe",
  "email": "johndoe@example.com",
  "avatar": "https://example.com/avatar.png",
  "role": "student",        // Can be "student" or "teacher"
  "joined_classes": [       // Only applicable for students
    {
      "class_id": "<class_id>",
      "status": "pending"   // Can be "pending" or "approved"
    }
  ],
  "created_classes": [      // Only applicable for teachers
    "<class_id>"
  ]
}
```

#### **Notes:**
- `role`: Differentiates between students and teachers.
- `joined_classes`: Tracks the classes a student has joined or requested to join.
- `created_classes`: Tracks the classes a teacher has created.

---

### **2. `classes` Collection**
This collection stores all the class-related information, including the teacher who created it, the students who joined, and the attendance records.

#### **Document Structure**
```json
{
  "class_id": "<unique_class_id>",
  "class_name": "Math 101",
  "created_by": "<teacher_id>",  // Reference to the teacher's user ID
  "students": [                 // List of students who joined the class
    {
      "student_id": "<student_id>",
      "status": "approved",      // Can be "approved" or "pending"
      "joined_date": "2024-12-01T08:00:00Z"
    }
  ],
  "attendance_days": [          // Tracks attendance for each day
    {
      "date": "2024-12-28",     // Date of attendance
      "attendance_code": "ABC123", // Code generated for the day
      "location": {                 //longitude for attendance code
        "latitude": 37.7749,
        "longitude": -122.4194
                                },
      "records": [              // Attendance submissions
        {
          "student_id": "<student_id>",
          "name": "John Doe",
          "submission_time": "2024-12-28T10:15:00Z",
          "status": "present"   // "present" if within 50 meters, else "absent"
        }
      ]
    }
  ]
}
```

#### **Notes:**
- `created_by`: Relates the class to the teacher who created it.
- `location`: The location tied to the class for attendance verification.
- `students`: Tracks students who have joined or requested to join the class.
- `attendance_days`: Stores attendance information for each day, including the code, student submissions, and their status.

---

### **3. `attendance_codes` Collection (Optional)**
This collection stores the attendance codes generated by teachers for specific days. It is useful if you want to decouple attendance codes from the main `classes` collection for easier querying.

#### **Document Structure**
```json
{
  "_id": "<unique_code_id>",
  "class_id": "<class_id>",      // Links to the class
  "date": "2024-12-28",          // Date the code is generated for
  "attendance_code": "ABC123",   // Unique code
  "location": {                  // Location tied to the code
    "latitude": 37.7749,
    "longitude": -122.4194
  },
  "valid_until": "2024-12-28T23:59:59Z" // Expiration time for the code
}
```

#### **Notes:**
- This collection allows you to manage attendance codes separately for better performance and modularity.
- The `valid_until` field enforces time restrictions for attendance submissions.

---

### **4. Example Queries**

#### **Query 1: Get All Classes Created by a Teacher**
```json
{
  "created_by": "<teacher_id>"
}
```

#### **Query 2: Get Approved Students for a Class**
```json
{
  "_id": "<class_id>",
  "students.status": "approved"
}
```

#### **Query 3: Get Attendance Records for a Specific Day**
```json
{
  "_id": "<class_id>",
  "attendance_days.date": "2024-12-28"
}
```

#### **Query 4: Verify Attendance Submission**
- Match student’s location with the class location and attendance code:
```json
{
  "_id": "<class_id>",
  "attendance_days": {
    "$elemMatch": {
      "date": "2024-12-28",
      "attendance_code": "ABC123"
    }
  }
}
```

---

### **5. Example Workflow**

#### **Teacher Creates a Class**
1. The teacher logs in and creates a class by providing a name and location.
2. A new document is added to the `classes` collection with the teacher's ID as `created_by`.

#### **Student Joins a Class**
1. The student requests to join a class by its ID.
2. The `joined_classes` field in the `users` collection is updated with the class ID and `status: pending`.
3. The `students` array in the `classes` document is updated with the student's ID and `status: pending`.

#### **Teacher Approves a Student**
1. The teacher approves the request.
2. The `status` field in both the `users.joined_classes` and `classes.students` is updated to `approved`.

#### **Teacher Generates Attendance Code**
1. The teacher generates an attendance code with a location.
2. The `attendance_days` array in the `classes` collection is updated with the new code and location.

#### **Student Submits Attendance**
1. The student logs in and submits the attendance code.
2. The app calculates the student’s location and checks if it is within 50 meters of the code’s location.
3. If valid, the `attendance_days.records` array is updated with the student’s submission.

---

### **6. Advantages of This Design**
1. **Scalability**: Using a document database allows horizontal scaling as the data grows.
2. **Flexibility**: Collections like `attendance_codes` can be added or removed without impacting the core schema.
3. **Efficient Queries**: Embedded arrays (e.g., `students`, `attendance_days`) reduce the need for joins, making queries faster.
4. **Minimal Duplication**: Key references (e.g., `class_id`, `user_id`) avoid unnecessary data duplication.

---

This database design meets your app's requirements while maintaining efficiency and flexibility for future expansion. Let me know if you need additional clarifications!


677138d30025b530a07e
677138c4001bfc4516f2
677133ee00148e00b7e9




classCollectionId
  "_id": "677138d30025b530a07e",
  "class_id": "677138d30025a8c56eb8",
  "class_name": "Class I",
  "created_by": "6770e2e7001cb9897392",  // Reference to the teacher's user ID
  "students": [                 // List of students who joined the class
     {
      "student_id": "6771428e002454c84ae4",
      "status": "approved",   
      "joined_date": "2024-12-01T08:00:00Z"
    },
 {
      "student_id": "677039c4001a6fb64fea",
      "status": "approved",   
      "joined_date": "2024-11-01T08:00:00Z"
    }

  ],


userCollectionId
  "_id": "6771428e002454c84ae4",
  "username": "John Ce",
  "email": "iou@gmail.com",
  "avatar": "https://example.com/avatar.png",
  "acccountId": "foijo908",
  "role": "student",        
  

  current login user
  "_id": "6770e2e7001cb9897392",
  "username": "Try",
  "email": "try@gmail.com",
  "avatar": "https://example.com/avatar.png",
  "acccountId": "6770e2e600094f0b8bf0",
  "role": "teacher",        // Can be "student" or "teacher"
  "joined_classes": [       // Only applicable for students
    {
      "class_id":"677138d30025b530a07e","status":"pending"
    }
  ],
  